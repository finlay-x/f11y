{
  "version": 3,
  "sources": ["src/js/app.js"],
  "sourcesContent": ["let f11y = f11y || {};\n\nf11y.focusableElements = [\n    'a[href]:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'area[href]:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'select:not([disabled]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'textarea:not([disabled]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'button:not([disabled]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'iframe:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'object:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    'embed:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    '[contenteditable]:not([disabled]):not([hidden]):not([aria-hidden]):not([tabindex^=\"-\"])',\n    '[tabindex]:not([tabindex^=\"-\"])',\n    '[role=\"menuitem\"]:not([disabled]):not([hidden]):not([aria-hidden])'\n];\n\nf11y.globalSettings = {\n    animatingClass: 'is-animating',\n    animatingOpenClass: 'is-opening',\n    animatingCloseClass: 'is-closing',\n    awaitOpenAnimation: false,\n    awaitCloseAnimation: false,\n    openClass: 'is-open',\n}\n\n\n/**      \n * Stores all the required information of the individual accordion items.\n * @typedef {Object} Store\n * @property {Array.<string>} activeLayers - All currently active layers on the page\n * @property {string} activeLayer - the currently active layer\n */\nf11y.store = {\n    activeLayers: [],\n    activeLayer: '',\n}\n\n\n/**\n * Description: For accordion, details/summary and disclosure components\n *\n * @class Accordion\n */\n    f11y.Accordion = class Accordion {\n        /**      \n         * Stores all the required information of the individual accordion items.\n         * @typedef {Object} AccordionItemObject\n         * @property {number} index - The index of the item in the accordion group, beginning at 0\n         * @property {Element} item - The item node/element\n         * @property {Element} itemPanel - The panel node/element within the item\n         * @property {Element} itemTrigger - The trigger node/element within the item\n         * @property {string} isOpen - Is the item open?\n         */\n\n        /**\n         * @typedef {Object} AccordionDefault\n         * @property {Function} onOpen - Function called once item is opened\n         * @property {Function} onClose - Function called once item closed\n         * @property {string} itemClass - The classname targeted for finding all accordion items\n         * @property {boolean} showMultiple - Should the Accordion allow multiple items open at once\n         */\n\n        /**\n         * @param {HTMLElement | Element} domNode \n         * @param {Object} opts \n         */\n        constructor(domNode, opts) {\n            const DEFAULTS = {\n                onOpen: () => { },\n                onClose: () => { },\n                itemClass: 'f11y--accordion__item',\n                showMultiple: true,\n            };\n\n            /** @type {AccordionDefault} Stores all configuration options */\n            this.options = Object.assign(DEFAULTS, opts);\n            \n            /** @type {HTMLElement | Element} The passed domNode */\n            this.accordionGroupNode = domNode;\n\n            /** @type {Array.<AccordionItemObject>} */\n            this.accordionItems = [];\n\n            this.init();\n        }\n\n        /**\n         * Initialises the class component\n         */\n        init(){\n            const items = Array.from(this.accordionGroupNode.querySelectorAll(\".f11y--accordion__item\"));\n            for (let i = 0; i < items.length; i += 1) {\n                const itemNode = items[i];\n                const itemPanelNode = itemNode.querySelector('[role=\"region\"]');\n                const itemTriggerNode = itemNode.querySelector(\"[aria-controls]\");\n\n                const itemArr = {\n                    index: i,\n                    item: itemNode,\n                    itemPanel: itemPanelNode,\n                    itemTrigger: itemTriggerNode,\n                    isOpen: itemTriggerNode.getAttribute(\"aria-expanded\"),\n                };\n\n                this.accordionItems.push(itemArr);\n            }\n\n            for (let i = 0; i < this.accordionItems.length; i += 1) {\n                this.accordionItems[i].itemTrigger.addEventListener(\n                    \"click\",\n                    this.toggle.bind(this, this.accordionItems[i])\n                );\n            }\n        }\n\n        /**\n         * Refreshes the class component and calls init() and does any necessary resets\n         */\n        refresh(){\n            this.accordionItems = [];\n            this.init();\n        }\n\n        /**\n         * Toggles passed accordion item.\n         * @param  {AccordionItemObject}  accordionItemObj  Object that represents a singular accordion item.\n         * @param  {Event|KeyboardEvent}  event             The event that triggered this function method.\n         */\n        toggle(accordionItemObj, event) {\n            let openState = accordionItemObj.isOpen;\n\n            if (this.options.showMultiple === false) {\n                this.closeAll(event);\n            }\n\n            if (openState == \"false\") {\n                this.openItem(event, accordionItemObj);\n                return;\n            }\n\n            if (openState == \"true\") {\n                this.closeItem(event, accordionItemObj);\n                return;\n            }\n        }\n\n\n        /**\n         * Closes all accordion items.\n         * @param  {Event|KeyboardEvent}  event  The event that triggered this function method.\n         */\n        closeAll(event) {\n            for (let i = 0; i < this.accordionItems.length; i += 1) {\n                let openState = this.accordionItems[i].isOpen;\n                if (openState == \"true\") {\n                    this.closeItem(event, this.accordionItems[i]);\n                }\n            }\n        }\n\n\n        /**\n         * Opens all accordion items.\n         * @param  {Event|KeyboardEvent}  event  The event that triggered this function method.\n         */\n        openAll(event) {\n            if (this.options.showMultiple === false) {\n                return;\n            }\n            for (let i = 0; i < this.accordionItems.length; i += 1) {\n                this.openItem(event, this.accordionItems[i]);\n            }\n        }\n\n\n        /**\n         * Opens the passed accordion item.\n         * @param  {Event|KeyboardEvent}  event             The event that triggered this function method.\n         * @param  {AccordionItemObject}  accordionItemObj  Object that represents a singular accordion item.\n         */\n        openItem(event, accordionItemObj) {\n            let openState = accordionItemObj.isOpen;\n\n            if(openState == \"true\"){\n                return;\n            }\n\n            accordionItemObj.itemPanel.removeAttribute(\"hidden\");\n            accordionItemObj.itemTrigger.setAttribute(\"aria-expanded\", \"true\");\n            accordionItemObj.isOpen = \"true\";\n\n            this.options.onOpen(accordionItemObj, event, this);\n        }\n\n\n        /**\n         * Closes the passed accordion item.\n         * @param  {Event|KeyboardEvent}  event             The event that triggered this function method.\n         * @param  {AccordionItemObject}  accordionItemObj  Object that represents a singular accordion item.\n         */\n        closeItem(event, accordionItemObj) {\n            let openState = accordionItemObj.isOpen;\n            \n            if(openState == \"true\"){\n                accordionItemObj.itemPanel.setAttribute(\"hidden\", \"\");\n                accordionItemObj.itemTrigger.setAttribute(\"aria-expanded\", \"false\");\n                accordionItemObj.isOpen = \"false\";\n\n                this.options.onClose(accordionItemObj, event, this);\n            }\n        }\n    }\n\n\n\n\n/**\n * Description: For dropdown menu, combobox, popovers,  and disclosure components\n *\n * @class Dropdown\n */\n    f11y.Dropdown = class Dropdown {\n\n        /**\n         * @typedef {Object} DropdownDefault\n         * @property {Function} onOpen - Function called once item is opened\n         * @property {Function} onClose - Function called once item closed\n         * @property {string} openClass - \n         * @property {string} triggerNodeSelector - \n         * @property {string} dropdownNodeSelector - \n         * @property {boolean} updateOnSelect - \n         * @property {string} updateTargetSelector - \n         * @property {boolean} closeOnSelect - \n         * @property {boolean} awaitCloseAnimation - \n         * @property {boolean} awaitOpenAnimation - \n         */\n\n        /**\n         * @param  {HTMLElement | Element} domNode The DOM element to initialise on\n         * @param  {Object} opts Optional params to modify functionality\n         */\n        constructor(domNode, opts) {\n            const DEFAULTS = {\n                onOpen: () => {},\n                onClose: () => {},\n                openClass: f11y.globalSettings.openClass,\n                triggerNodeSelector: 'button[aria-controls]',\n                dropdownNodeSelector: '[role=\"menu\"]',\n                updateOnSelect: true,\n                updateTargetSelector: '',\n                closeOnSelect: false,\n                awaitCloseAnimation: false,\n                awaitOpenAnimation: false\n            }\n\n            /** @type {DropdownDefault} */\n            this.options = Object.assign(DEFAULTS, opts);\n\n            /** @type {Element | HTMLElement} */\n            this.domNode = domNode;\n\n            /** @type {Array.<Element|HTMLElement>} */\n            this.dropdownItemNodes = [];\n\n            /** @type {Array.<String>} */\n            this.firstChars = [];\n\n            this.init();\n        }\n\n        /**\n         * Checks if a HTML Element is undefined or null\n         * @param {Element} node Node to be checked\n         */\n        isset(node){\n            if (typeof(node) != 'undefined' && node != null) {\n                return true;\n            }else{\n                return false;\n            }\n        }\n\n        /**\n         * Initialises the class component\n         */\n        init() {\n            this.triggerNode = this.domNode.querySelector(this.options.triggerNodeSelector);\n            this.dropdownNode = this.domNode.querySelector(this.options.dropdownNodeSelector);\n\n            this.triggerNode.addEventListener( 'keydown', this.onTriggerKeydown.bind(this) );\n            this.triggerNode.addEventListener( 'click', this.onTriggerClick.bind(this) );\n\n            const nodes = this.dropdownNode.querySelectorAll(f11y.focusableElements);\n            for (let i = 0; i < nodes.length; i++) {\n                const dropdownItem = nodes[i];\n                this.dropdownItemNodes.push(dropdownItem);\n                dropdownItem.tabIndex = -1;\n                this.firstChars.push(dropdownItem.textContent.trim()[0].toLowerCase());\n\n                dropdownItem.addEventListener( 'keydown', this.onDropdownItemKeydown.bind(this) );\n                dropdownItem.addEventListener( 'mouseover', this.onDropdownItemMouseover.bind(this) );\n\n                if (this.options.updateOnSelect === true) {\n                    dropdownItem.addEventListener( 'click', this.onDropdownItemClick.bind(this) );\n                }\n\n                if (!this.firstDropdownItem) {\n                    this.firstDropdownItem = dropdownItem;\n                }\n\n                this.lastDropdownItem = dropdownItem;\n            }\n\n            this.options.updateTargetSelector ? this.options.updateTargetSelector : this.options.triggerNodeSelector;\n            this.updateTargetNode = document.querySelector(this.options.updateTargetSelector);\n\n\n            this.domNode.addEventListener( 'focusin', this.onFocusin.bind(this) );\n            this.domNode.addEventListener( 'focusout', this.onFocusout.bind(this) );\n\n            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);\n\n            document.addEventListener('scroll', this.checkBoundingBox.bind(this));\n            window.addEventListener('resize', this.checkBoundingBox.bind(this));\n        }\n\n        /**\n         * Refreshes the class component and calls init() and does any necessary resets\n         */\n        refresh() {\n            this.dropdownItemNodes = [];\n            this.firstChars = [];\n            this.init();\n        }\n\n        /**\n         * Checks whether the dropdown is open\n         * @returns  {boolean}\n         */\n        isOpen() {\n            return this.triggerNode.getAttribute('aria-expanded') === 'true';\n        }\n        \n\n        /**\n         * Sets focus to a menu item.\n         * @param  {HTMLElement} newDropdownItem New target menu item\n         */\n        setFocusToDropdownItem(newDropdownItem) {\n            this.dropdownItemNodes.forEach(function (item) {\n                if (item === newDropdownItem) {\n                    item.tabIndex = 0;\n                    newDropdownItem.focus();\n                } else {\n                    item.tabIndex = -1;\n                }\n            })\n        }\n\n\n        /**\n         * Sets focus to the first item in the dropdown menu\n         */\n        setFocusToFirstDropdownItem() {\n            this.setFocusToDropdownItem(this.firstDropdownItem);\n        }\n\n\n        /**\n         * Sets focus to the last item in the dropdown menu\n         */\n        setFocusToLastDropdownItem() {\n            this.setFocusToDropdownItem(this.lastDropdownItem);\n        }\n\n\n        /**\n         * Sets focus to the previous menu item\n         * @param    {HTMLElement | Element} currentDropdownItem The currently focused item within the dropdown menu\n         * @returns  {HTMLElement | Element} The newly focused item within the dropdown menu\n         */\n        setFocusToPreviousDropdownItem(currentDropdownItem) {\n            let newDropdownItem, index;\n\n            if (currentDropdownItem === this.firstDropdownItem) {\n                newDropdownItem = this.lastDropdownItem;\n            } else {\n                index = this.dropdownItemNodes.indexOf(currentDropdownItem);\n                newDropdownItem = this.dropdownItemNodes[index - 1];\n            }\n\n            this.setFocusToDropdownItem(newDropdownItem);\n\n            return newDropdownItem;\n        }\n\n\n        /**\n         * Sets focus to the next menu item\n         * @param    {HTMLElement | Element} currentDropdownItem Currently focused item within the dropdown menu\n         * @returns  {HTMLElement | Element} The newly focused item within the dropdown menu\n         */\n        setFocusToNextDropdownItem(currentDropdownItem) {\n            let newDropdownItem, index;\n\n            if (currentDropdownItem === this.lastDropdownItem) {\n                newDropdownItem = this.firstDropdownItem;\n            } else {\n                index = this.dropdownItemNodes.indexOf(currentDropdownItem);\n                newDropdownItem = this.dropdownItemNodes[index + 1];\n            }\n            this.setFocusToDropdownItem(newDropdownItem);\n\n            return newDropdownItem;\n        }\n\n\n        /**\n         * Sets focus by the the first character of a menu item\n         * @param  {HTMLElement | Element} currentDropdownItem Currently focused item within the dropdown menu\n         * @param  {string} char The character to base the focus on\n         */\n        setFocusByFirstCharacter(currentDropdownItem, char) {\n            let start, index;\n\n            if (char.length > 1) {\n                return;\n            }\n\n            char = char.toLowerCase();\n\n            start = this.dropdownItemNodes.indexOf(currentDropdownItem) + 1;\n            if (start >= this.dropdownItemNodes.length) {\n                start = 0;\n            }\n\n            index = this.firstChars.indexOf(char, start);\n\n            if (index === -1) {\n                index = this.firstChars.indexOf(char, 0);\n            }\n\n            if (index > -1) {\n                this.setFocusToDropdownItem(this.dropdownItemNodes[index]);\n            }\n        }\n\n        /**\n         * Opens the dropdown\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        openDropdown(event) {\n            const domNode = this.domNode;\n            const dropdownNode = this.dropdownNode;\n            const triggerNode = this.triggerNode;\n            const openClass = this.options.openClass;\n\n            triggerNode.setAttribute('aria-expanded', 'true');\n            dropdownNode.setAttribute('aria-hidden', 'false');\n            domNode.classList.add(openClass);\n\n            if (this.options.awaitOpenAnimation) {\n                domNode.addEventListener('animationend', handler );\n                domNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n                \n                function handler() {\n                    domNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n\n                    domNode.removeEventListener(\n                        'animationend', \n                        handler\n                    );\n                }\n            }\n\n            this.options.onOpen(event, this);\n        }\n\n        /**\n         * Closes the dropdown\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        closeDropdown(event) {\n            if (this.isOpen()) {\n                const domNode = this.domNode;\n                const dropdownNode = this.dropdownNode;\n                const triggerNode = this.triggerNode;\n                const openClass = this.options.openClass;\n\n                dropdownNode.setAttribute('aria-hidden', 'true');\n\n                if (this.options.awaitCloseAnimation) {\n                    domNode.addEventListener( 'animationend', handler );\n                    domNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n                    \n                    function handler() {\n                        domNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n                        domNode.classList.remove(openClass);\n\n                        domNode.removeEventListener(\n                            'animationend', \n                            handler\n                        );\n                    }\n\n                    \n                } else {\n                    domNode.classList.remove(openClass);\n                }\n\n                triggerNode.removeAttribute('aria-expanded');\n                this.options.onClose(event, this);\n            }\n\n            this.resetBoundingBox();\n        }\n\n        /**\n         * Handles focus of Dropdown\n         */\n        onFocusin() {\n            this.domNode.classList.add('focus');\n        }\n\n        /**\n         * Handles lose of focus on Dropdown\n         */\n        onFocusout() {\n            this.domNode.classList.remove('focus');\n        }\n\n        /**\n         * Handles all Trigger toggle keyboard events\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        onTriggerKeydown(event) {\n            const key = event.key;\n            let flag = false;\n\n            switch (key) {\n                case ' ':\n                case 'Enter':\n                case 'ArrowDown':\n                case 'Down':\n                    this.openDropdown(event);\n                    this.checkBoundingBox();\n                    this.setFocusToFirstDropdownItem();\n                    flag = true;\n                    break;\n\n                case 'Esc':\n                case 'Escape':\n                    if(this.isOpen()){\n                        this.closeDropdown(event);\n                        this.triggerNode.focus();\n                        flag = true;\n                    }else{\n                        flag = false;\n                    }\n                    break;\n\n                case 'Up':\n                case 'ArrowUp':\n                    this.openDropdown(event);\n                    this.checkBoundingBox();\n                    this.setFocusToLastDropdownItem();\n                    flag = true;\n                    break;\n\n                case 'Tab':\n                    if(this.isOpen()){\n                        this.closeDropdown(event);\n                    }\n                    flag = false;\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (flag) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * Handles Trigger toggle click event\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        onTriggerClick(event) {\n            if (this.isOpen()) {\n                this.closeDropdown(event);\n                this.triggerNode.focus();\n            } else {\n                this.openDropdown(event);\n                this.checkBoundingBox();\n                this.setFocusToFirstDropdownItem();\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        /**\n         * Handles all keyboard events on the menu items\n         * @param  {KeyboardEvent} event The event that triggered this method\n         */\n        onDropdownItemKeydown(event) {\n            const tgt = event.currentTarget;\n            const key = event.key;\n            let flag = false;\n\n            function isPrintableCharacter(str) {\n                return str.length === 1 && str.match(/\\S/);\n            }\n\n            if (event.ctrlKey || event.altKey || event.metaKey) {\n                return;\n            }\n\n            if (event.shiftKey) {\n                if (isPrintableCharacter(key)) {\n                    this.setFocusByFirstCharacter(tgt, key);\n                    flag = true;\n                }\n\n                if (event.key === 'Tab') {\n                    this.triggerNode.focus();\n                    this.closeDropdown(event);\n                    flag = true;\n                }\n            } else {\n                switch (key) {\n                    case ' ':\n                        window.location.href = tgt.href;\n                        break;\n\n                    case 'Esc':\n                    case 'Escape':\n                        this.closeDropdown(event);\n                        this.triggerNode.focus();\n                        flag = true;\n                        break;\n\n                    case 'Up':\n                    case 'ArrowUp':\n                        this.setFocusToPreviousDropdownItem(tgt);\n                        flag = true;\n                        break;\n\n                    case 'ArrowDown':\n                    case 'Down':\n                        this.setFocusToNextDropdownItem(tgt);\n                        flag = true;\n                        break;\n\n                    case 'Home':\n                    case 'PageUp':\n                        this.setFocusToFirstDropdownItem();\n                        flag = true;\n                        break;\n\n                    case 'End':\n                    case 'PageDown':\n                        this.setFocusToLastDropdownItem();\n                        flag = true;\n                        break;\n\n                    case 'Tab':\n                        this.closeDropdown(event);\n                        this.triggerNode.focus();\n                        flag = true;\n                        break;\n                    \n                    case 'Enter':\n                        this.onDropdownItemClick(event);\n                        break;\n\n                    default:\n                        if (isPrintableCharacter(key)) {\n                            this.setFocusByFirstCharacter(tgt, key);\n                            flag = true;\n                        }\n                        break;\n                }\n            }\n            if (flag) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * Handles hover event for menu items\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        onDropdownItemMouseover(event) {\n            const tgt = event.currentTarget;\n            tgt.focus();\n        }\n\n        /**\n         * Handles click events on menu items\n         * @param  {Event|KeyboardEvent} event The event that triggered this method\n         */\n        onDropdownItemClick(event) {\n            if (this.options.updateOnSelect === true) {\n                const menuItemTextContent = event.currentTarget.textContent;\n                this.updateTargetNode.textContent = menuItemTextContent;\n                this.updateTargetNode.value = menuItemTextContent;\n            }\n            if(this.options.closeOnSelect === true) {\n                this.closeDropdown(event);\n            }\n        }\n\n        \n        checkBoundingBox() {\n            let dropdownBounds = this.dropdownNode.getBoundingClientRect();\n            this.checkVerticalBounding(dropdownBounds);\n        }\n\n\n        checkVerticalBounding(dropdownBounds) {\n            let windowHeight = window.innerHeight\n        \n            if (dropdownBounds.bottom > windowHeight) {\n                this.domNode.classList.add('out-of-bounds--bottom');\n                this.domNode.classList.remove('out-of-bounds--top');\n                return;\n            }\n        \n            if (dropdownBounds.top < 0) {\n                this.domNode.classList.add('out-of-bounds--top');\n                this.domNode.classList.remove('out-of-bounds--bottom');\n                return;\n            }\n        }\n\n        resetBoundingBox() {\n            this.domNode.classList.remove('out-of-bounds--top', 'out-of-bounds--bottom');\n        }\n\n        /**\n         * Handles click events that are outside of the dropdown remit\n         * @param  {Object} event The event that triggered this method\n         */\n        onBackgroundMousedown(event) {\n            if (!this.domNode.contains(event.target)) {\n                if (this.isOpen()) {\n                    this.closeDropdown(event);\n                    this.triggerNode.focus();\n                }\n            }\n        }\n    }\n\n\n\n\n/**\n * Description: For modal, sheet, popovers, and dialog components\n *\n * @class Layer\n */\n    f11y.Layer = class Layer {\n\n        /**\n         * @param {HTMLElement | Element} domNode \n         * @param {Object} opts \n         */\n        constructor (domNode, opts) {\n\n            /**\n             * @typedef {Object} LayerDefault\n             * @property {Function} onOpen - Function called once item is opened\n             * @property {Function} onClose - Function called once item closed\n             * @property {string} openTrigger - \n             * @property {string} closeTrigger - \n             * @property {string} openClass - \n             * @property {boolean} disableScroll - \n             * @property {boolean} closeOnBackgroundClick -\n             * @property {boolean} awaitCloseAnimation - \n             * @property {boolean} awaitOpenAnimation - \n             */\n\n            const DEFAULTS = {\n                onOpen: () => { },\n                onClose: () => { },\n                openTrigger: 'f11y-layer-open',\n                closeTrigger: 'f11y-layer-close',\n                openClass: f11y.globalSettings.openClass,\n                disableScroll: true,\n                closeOnBackgroundClick: true,\n                awaitCloseAnimation: false,\n                awaitOpenAnimation: false,\n            }\n\n            /** @type {LayerDefault} */\n            this.options = Object.assign(DEFAULTS, opts);\n\n            /** @type {Element | HTMLElement} */\n            this.layer = domNode;\n\n            /** @type {string} */\n            this.id = '';\n\n            this.init();\n        }\n\n        /**\n         * Initialises the class component\n         */\n        init(){\n            this.id = this.layer.id;\n            this.dialog = this.layer.querySelector('[role=\"dialog\"]');\n            this.triggerNodes = document.querySelectorAll('[' + this.options.openTrigger + '=\"' + this.layer.id + '\"]');\n            this.closeNodes = document.querySelectorAll('[' + this.options.closeTrigger + '=\"' + this.layer.id + '\"]');\n            this.focusableElements = Array.from(this.layer.querySelectorAll(f11y.focusableElements));\n            this.filterFocusableElements();\n\n            for (let i = 0; i < this.triggerNodes.length; i++) {\n                this.triggerNodes[i].addEventListener( 'click', this.openLayer.bind(this), true);\n            }\n\n            for (let i = 0; i < this.closeNodes.length; i++) {\n                this.closeNodes[i].addEventListener( 'click', this.closeLayer.bind(this), true);\n            }\n\n            for (let i = 0; i < this.focusableElements.length; i++) {\n                if (!this.firstElement) {\n                    this.firstElement = this.focusableElements[i];\n                }\n                this.lastElement = this.focusableElements[i];\n            }\n\n            this.onBackgroundMousedownBound = this.onBackgroundMousedown.bind(this);\n            this.onWindowKeydownBound = this.onWindowKeydown.bind(this);\n        }\n\n        /**\n         * Refreshes the class component and calls init() and does any necessary resets\n         */\n        refresh(){\n            this.init();\n        }\n\n\n        filterFocusableElements(){\n            let i = this.focusableElements.length;\n\n            while(i--){\n                const element = this.focusableElements[i];\n                const closestHidden = element.closest('[aria-hidden]');\n\n                if(closestHidden != this.layer){\n                    this.focusableElements.splice(i, 1);\n                }\n            }\n        }\n\n        /**\n         * Checks whether the layer is open\n         * @returns  {boolean}\n         */\n        isOpen() {\n            return this.layer.getAttribute('aria-hidden') === 'false';\n        }\n\n        /**\n         * Checks whether the layer is open\n         * @param {Element | HTMLElement}  newElement Element Node to move focus to\n         */\n        setFocusToElement(newElement) {\n            this.focusableElements.forEach(function (element) {\n                if (element === newElement) {\n                    newElement.focus();\n                }\n            })\n        }\n\n        /**\n         * Sets Focus to the first focusable item inside the layer\n         */\n        setFocusToFirstElement() {\n            this.setFocusToElement(this.firstElement);\n        }\n\n        /**\n         * Sets Focus to the last focusable item inside the layer\n         */\n        setFocusToLastElement() {\n            this.setFocusToElement(this.lastElement);\n        }\n\n        /**\n         * Sets Focus to the previous focusable item inside the layer\n         * @param {Element | HTMLElement}  currentElement the currently focused element within the layer\n         */\n        setFocusToPrevElement(currentElement) {\n            let newElement, index;\n\n            if (currentElement === this.firstElement) {\n                newElement = this.lastElement;\n            } else {\n                index = this.focusableElements.indexOf(currentElement);\n                newElement = this.focusableElements[index - 1];\n            }\n\n            this.setFocusToElement(newElement);\n\n            return newElement;\n        }\n\n        /**\n         * Sets Focus to the next focusable item inside the layer\n         * @param {Element | HTMLElement}  currentElement the currently focused element within the layer\n         */\n        setFocusToNextElement(currentElement) {\n            let newElement, index;\n\n            if (currentElement === this.lastElement) {\n                newElement = this.firstElement;\n            } else {\n                index = this.focusableElements.indexOf(currentElement);\n                newElement = this.focusableElements[index + 1];\n            }\n            this.setFocusToElement(newElement);\n\n            console.log(newElement);\n\n            return newElement;\n        }\n\n        /**\n         * Opens the layer\n         * @param {Event | KeyboardEvent}  event The event object that triggered the method\n         */\n        openLayer (event) {\n            this.activeElement = document.activeElement;\n\n            const layerNode = this.layer;\n            const documentBody = document.querySelector('body');\n            const openClass = this.options.openClass;\n\n            layerNode.setAttribute('aria-hidden', 'false');\n            layerNode.classList.add(openClass);\n            layerNode.addEventListener('click', this.onLayerClick);\n\n            this.options.disableScroll ? documentBody.style.setProperty('overflow', 'hidden') : '';\n            \n            if (this.options.awaitOpenAnimation) {\n                layerNode.addEventListener('animationend', handler);\n                layerNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n\n                function handler() {\n                    layerNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n\n                    layerNode.removeEventListener( 'animationend', handler );\n                }\n            }\n\n            this.setFocusToFirstElement();\n            this.addGlobalListeners();\n            f11y.store.activeLayer = this.id;\n            f11y.store.activeLayers.push(this.id);\n            this.options.onOpen(event, this);\n        }\n\n        /**\n         * Closes the layer\n         * @param {Event | KeyboardEvent}  event The event object that triggered the method\n         */\n        closeLayer (event) {\n            if (this.isOpen()) {\n                if(this.id != f11y.store.activeLayer) return;\n\n                const layerNode = this.layer;\n                const documentBody = document.querySelector('body');\n                const openClass = this.options.openClass;\n\n                f11y.store.activeLayers.pop();\n                f11y.store.activeLayer = f11y.store.activeLayers[f11y.store.activeLayers.length - 1];\n\n                layerNode.setAttribute('aria-hidden', 'true');\n                layerNode.removeEventListener('click', this.onLayerClick);\n\n                if (this.activeElement && this.activeElement.focus) {\n                    this.activeElement.focus();\n                }\n\n                if (this.options.awaitCloseAnimation) {\n                    layerNode.addEventListener( 'animationend', handler );\n                    layerNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n\n                    function handler() {\n                        layerNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n                        layerNode.classList.remove(openClass);\n\n                        if(f11y.store.activeLayers <= 0){\n                            documentBody.style.removeProperty('overflow');\n                        }\n\n                        layerNode.removeEventListener(\n                            'animationend', \n                            handler\n                        );\n                    }\n                } else {\n                    layerNode.classList.remove(openClass);\n\n                    f11y.store.activeLayers <= 0 ? documentBody.style.removeProperty('overflow') : '';\n                }\n            }\n            this.removeGlobalListeners();\n            this.options.onClose(event, this);\n        }\n\n        /**\n         * Adds bound methods window events \n         */\n        addGlobalListeners() {\n            window.addEventListener('keydown', this.onWindowKeydownBound);\n            if(this.options.closeOnBackgroundClick){\n                window.addEventListener('mousedown', this.onBackgroundMousedownBound);\n            }\n        }\n        \n        /**\n         * Removes bound methods window events \n         */\n        removeGlobalListeners() {\n            window.removeEventListener('keydown', this.onWindowKeydownBound);\n            if(this.options.closeOnBackgroundClick){\n                window.removeEventListener('mousedown', this.onBackgroundMousedownBound);\n            }\n        }\n\n        /**\n         * Closes a layer by id attribute\n         * @param {string} targetLayer id string of the layer to be closed\n         */\n        closeLayerById (targetLayer) {\n            this.layer = document.getElementById(targetLayer);\n            if (this.layer){\n                this.closeLayer();\n            }\n        }\n\n        /**\n         * Implements window keydown events functionality\n         * @param {KeyboardEvent} event The event object that triggered the method\n         */\n        onWindowKeydown(event) {\n            let flag = false;\n            const tgt = event.target || event.currentTarget;\n\n            if (event.shiftKey) {\n                if (event.key === 'Tab') {\n                    this.setFocusToPrevElement(tgt);\n                    flag = true;\n                }\n            }else{\n                switch (event.key) {\n                    case 'Escape':\n                    case 'Esc':\n                        this.closeLayer(event);\n                        flag = true;\n                        break;\n                    case 'Tab':\n                        this.setFocusToNextElement(tgt);\n                        flag = true;\n                        break;\n\n                    case 'Home':\n                    case 'PageUp':\n                        this.setFocusToFirstElement();\n                        flag = true;\n                        break;\n\n                    case 'End':\n                    case 'PageDown':\n                        this.setFocusToLastElement()\n                        flag = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (flag) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * Handles click events that are outside of the layer dialog remit\n         * @param  {Event}  event  The event that triggered this method\n         */\n        onBackgroundMousedown(event) {\n            if (!this.dialog.contains(event.target)) {\n                if (this.isOpen()) {\n                    this.closeLayer(event);\n                    this.activeElement.focus();\n                }\n            }\n        }\n    }\n\n\n\n\n/**\n * Description: For ARIA defined responsive table components\n *\n * @class Table\n */\n    f11y.Table = class Table {\n        constructor (domNode) {\n            this.tableNode = domNode;\n            this.init();\n        }\n\n        init(){\n            this.tableId = this.tableNode.getAttribute('id');\n\n            this.tableGroups = Array.from(this.tableNode.querySelectorAll('thead, tbody, tfoot'));\n            this.tableRows = Array.from(this.tableNode.querySelectorAll('tr'));\n            this.tableHeaderCells = Array.from(this.tableNode.querySelectorAll('th'));\n            this.tableDataCells = Array.from(this.tableNode.querySelectorAll('td'));\n\n            this.styleElm = document.createElement(\"style\");\n            document.head.appendChild(this.styleElm);\n            this.stylesheet = this.styleElm.sheet;\n\n            this.insertCellHeaders();\n            this.insertTableAria();\n        }\n\n        refresh(){\n            this.init();\n        }\n\n        insertCellHeaders(){\n            for (let i = 0; i < this.tableHeaderCells.length; i += 1) {\n                this.stylesheet.insertRule(\n                    \"#\" + this.tableId + \" td:nth-child(\" + (i + 1) +  \")::before {\" +\n                        \"content:'\" + this.tableHeaderCells[i].innerText + \"';\" + \n                    \"}\",\n                    this.stylesheet.cssRules.length\n                );\n            }\n        }\n\n        insertTableAria(){\n            this.tableNode.setAttribute('role','table');\n\n            for (let i = 0; i < this.tableGroups.length; i++) {\n                this.tableGroups[i].setAttribute('role','rowgroup');\n            }\n\n            for (let i = 0; i < this.tableRows.length; i++) {\n                this.tableRows[i].setAttribute('role','row');\n            }\n\n            for (let i = 0; i < this.tableHeaderCells.length; i++) {\n                this.tableHeaderCells[i].setAttribute('role','columnheader');\n            }\n\n            for (let i = 0; i < this.tableDataCells.length; i++) {\n                this.tableDataCells[i].setAttribute('role','cell');\n            }\n        }\n\n    }\n\n\n\n\n/**\n * Description: \n *\n * @class TabList\n */\n    f11y.TabList = class TabList {\n\n        /**\n         * @param {HTMLElement | Element} domNode \n         * @param {Object} opts \n         */\n        constructor(domNode, opts) {\n            /**\n             * @typedef {Object} TabListDefault\n             * @property {Function} onChange - Function called once item is opened\n             * @property {string} orientation - \n             * @property {boolean} disableActiveTab - \n             */\n\n            const DEFAULTS = {\n                onChange: () => { },\n                orientation: 'horizontal',\n                disableActiveTab: true\n            }\n\n            /** @type {TabListDefault} */\n            this.options = Object.assign(DEFAULTS, opts);\n\n            this.tablistNode = domNode;\n\n            this.init();\n        }\n\n        /**\n         * Initialises the class component\n         */\n        init(){\n            this.tabs = Array.from(this.tablistNode.querySelectorAll('[role=tab]'));\n            this.activeTabs = Array.from(this.tablistNode.querySelectorAll('[role=tab]:not([disabled])'));\n            this.tabList = this.tablistNode.querySelector('[role=\"tablist\"]');\n\n            /** @type {Array<HTMLElement>} */\n            this.tabpanels = [];\n\n            for (let i = 0; i < this.tabs.length; i += 1) {\n                const tab = this.tabs[i];\n                const tabpanel = document.getElementById(tab.getAttribute('aria-controls'));\n\n                tab.tabIndex = -1;\n                tab.setAttribute('aria-selected', 'false');\n                this.tabpanels.push(tabpanel);\n\n                tab.addEventListener('keydown', this.onKeydown.bind(this));\n                tab.addEventListener('click', this.onClick.bind(this));\n\n                if (!this.firstTab) {\n                    this.firstTab = tab;\n                }\n\n                this.lastTab = tab;\n            }\n\n            this.handleTabChange(this.firstTab);\n        }\n\n        /**\n         * Refreshes the class component and calls init() and does any necessary resets\n         */\n        refresh() {\n            this.init();\n        }\n\n        /**\n         * Handles Change a tab\n         * @param {HTMLElement} targetTab \n         * @param {Event | KeyboardEvent} event \n         */\n        handleTabChange(targetTab, event) {\n            this.setSelectedTab(targetTab, event);\n\n            this.activeTabs = Array.from(this.tablistNode.querySelectorAll('[role=tab]:not([disabled])'));\n            this.firstActiveTab = null;\n\n            for (let i = 0; i < this.activeTabs.length; i += 1) {\n                const tab = this.activeTabs[i];\n\n                if (!this.firstActiveTab) {\n                    this.firstActiveTab = tab;\n                }\n\n                this.lastActiveTab = tab;\n            }\n\n            if(this.options.disableActiveTab === true){\n                this.activeTabs[0].removeAttribute('tabindex');\n            }\n\n            this.options.onChange(event, this);\n        }\n\n        /**\n         * Sets the focus of the selected tabs etc\n         * @param {HTMLElement} targetTab \n         */\n        setSelectedTab(targetTab) {\n            let index;\n            for (let i = 0; i < this.tabs.length; i += 1) {\n                const tab = this.tabs[i];\n                if (targetTab.id === tab.id) {\n                    tab.setAttribute('aria-selected', 'true');\n                    tab.removeAttribute('tabindex');\n                    this.tabpanels[i].classList.remove('is-visually-hidden');\n                    this.tabpanels[i].removeAttribute('hidden');\n\n                    if(this.options.disableActiveTab === true){\n                        tab.setAttribute('disabled', '');\n                        tab.tabIndex = -1;\n                        index = this.tabs.indexOf(targetTab);\n                    }\n                } else {\n                    tab.setAttribute('aria-selected', 'false');\n                    tab.removeAttribute('disabled');\n                    tab.tabIndex = -1;\n                    this.tabpanels[i].classList.add('is-visually-hidden');\n                    this.tabpanels[i].setAttribute('hidden', '');\n                }\n            }\n        }\n\n        /**\n         * Moves focus to passed tab\n         * @param {HTMLElement} targetTab \n         */\n        moveFocusToTab(targetTab) {\n            targetTab.focus();\n        }\n\n        /**\n         * Moves focus to previous tab\n         * @param {HTMLElement} targetTab \n         */\n        moveFocusToPreviousTab(targetTab) {\n            let index = this.activeTabs.indexOf(targetTab);\n\n            if (targetTab.id === this.firstActiveTab.id) {\n                this.moveFocusToTab(this.lastActiveTab);\n            } else {\n                this.moveFocusToTab(this.activeTabs[index - 1]);\n            }\n        }\n\n        /**\n         * Moves focus to Next tab\n         * @param {HTMLElement} targetTab \n         */\n        moveFocusToNextTab(targetTab) {\n            let index = this.activeTabs.indexOf(targetTab);\n\n            if (targetTab.id === this.lastActiveTab.id) {\n                this.moveFocusToTab(this.firstActiveTab);\n            } else {\n                this.moveFocusToTab(this.activeTabs[index + 1]);\n            }\n        }\n\n        /**\n         * Handles keydown events on tabs\n         * @param {KeyboardEvent} event \n         */\n        onKeydown(event) {\n            const tgt = event.currentTarget;\n            let flag = false;\n\n            switch (event.key) {\n                case 'ArrowLeft':\n                    if(this.options.orientation === 'horizontal'){\n                        this.moveFocusToPreviousTab(tgt);\n                        flag = true;\n                    }\n                    break;\n\n                case 'ArrowRight':\n                    if(this.options.orientation === 'horizontal'){\n                        this.moveFocusToNextTab(tgt);\n                        flag = true;\n                    }\n                    break;\n\n                case 'ArrowUp':\n                    if(this.options.orientation === 'vertical'){\n                        this.moveFocusToPreviousTab(tgt);\n                        flag = true;\n                    }\n                    break;\n\n                case 'ArrowDown':\n                    if(this.options.orientation === 'vertical'){\n                        this.moveFocusToNextTab(tgt);\n                        flag = true;\n                    }\n                    break;\n\n                case 'Home':\n                    this.moveFocusToTab(this.firstTab);\n                    flag = true;\n                    break;\n\n                case 'End':\n                    this.moveFocusToTab(this.lastTab);\n                    flag = true;\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (flag) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * Handles click events\n         * @param {Event} event \n         */\n        onClick(event) {\n            this.handleTabChange(event.currentTarget, event);\n        }\n    }\n\n\n\n\n/**\n * Description: \n *\n * @class Toast\n */\n    f11y.Toast = class Toast {\n        constructor (domNode, opts){\n\n        }\n    }\n\n\n\n\n/**\n * Description: \n *\n * @class Tooltip\n */\n    f11y.Tooltip = class Tooltip {\n\n        /**\n         * @param {HTMLElement | Element} domNode \n         * @param {Object} opts \n         */\n        constructor(domNode, opts) {\n            const DEFAULTS = {\n                onOpen: () => { },\n                onClose: () => { },\n                triggerNodeSelector: '[aria-labelledby]',\n                tooltipNodeSelector: '[role=tooltip]',\n                positionAttributeName: 'f11y-tooltip-position',\n                openClass: f11y.globalSettings.openClass,\n                awaitCloseAnimation: true,\n                awaitOpenAnimation: true\n            }\n\n            this.domNode = domNode;\n            this.options = Object.assign(DEFAULTS, opts);\n            this.triggerNode = '';\n            this.tooltipNode = '';\n            this.tooltipPosition = '';\n            this.onTooltipKeydownBound = '';\n            this.globalPointerDownBound = '';\n\n            this.init();\n        }\n\n        init(){\n            this.timer = 0;\n            this.triggerNode = this.domNode.querySelector(this.options.triggerNodeSelector);\n            this.tooltipNode = this.domNode.querySelector(this.options.tooltipNodeSelector);\n            this.tooltipPosition = this.getTooltipPosition();\n            this.onTooltipKeydownBound = this.onTooltipKeydown.bind(this);\n            this.onBackgroundMousedownBound = this.onBackgroundMousedown.bind(this);\n\n            this.domNode.addEventListener('mouseenter', this.openTooltip.bind(this));\n            this.domNode.addEventListener('touchstart', this.openTooltip.bind(this));\n            this.domNode.addEventListener('focusin', this.onFocusin.bind(this));\n            this.triggerNode.addEventListener('focusin', this.openTooltip.bind(this));\n\n            this.domNode.addEventListener('mouseleave', this.closeTooltip.bind(this));\n            this.domNode.addEventListener('touchend', this.closeTooltip.bind(this));\n            this.domNode.addEventListener('focusout', this.onFocusout.bind(this));\n            this.triggerNode.addEventListener('focusout', this.closeTooltip.bind(this));\n\n            document.addEventListener('scroll', this.checkBoundingBox.bind(this));\n            window.addEventListener('resize', this.checkBoundingBox.bind(this));\n        }\n\n        refresh(){\n            this.init();\n        }\n\n        isOpen() {\n            return this.domNode.classList.contains(this.options.openClass) === true;\n        }\n\n        openTooltip(){\n            const domNode = this.domNode;\n            const tooltipNode = this.tooltipNode;\n            const timer = this.timer;\n            const openClass = this.options.openClass\n\n            tooltipNode.classList.add(openClass);\n\n            if (!this.isOpen() && this.options.awaitOpenAnimation) {\n                domNode.addEventListener('animationend', handler );\n                domNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n                \n                function handler() {\n                    domNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingOpenClass);\n                    domNode.classList.add(openClass);\n                    clearTimeout(timer);\n\n                    domNode.removeEventListener(\n                        'animationend', \n                        handler\n                    );\n                }\n            }else{\n                domNode.classList.add(openClass);\n                clearTimeout(timer);\n            }\n\n            this.checkBoundingBox();\n            this.addGlobalListeners();\n        }\n\n        closeTooltip(){\n            if(this.isOpen()){\n                const domNode = this.domNode;\n                const tooltipNode = this.tooltipNode;\n                const openClass = this.options.openClass;\n    \n                if (this.options.awaitCloseAnimation) {\n                    this.timer = setTimeout(function(){\n                        domNode.addEventListener( 'animationend', handler );\n                        domNode.classList.add(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n    \n                        function handler() {\n                            domNode.classList.remove(f11y.globalSettings.animatingClass, f11y.globalSettings.animatingCloseClass);\n                            domNode.classList.remove(openClass);\n                            tooltipNode.classList.remove(openClass);\n    \n                            domNode.removeEventListener(\n                                'animationend', \n                                handler\n                            );\n                        }\n                    }, 750);\n                } else{\n                    this.timer = setTimeout(function(){\n                        domNode.classList.remove(openClass);\n                        tooltipNode.classList.remove(openClass);\n                    }, 750);\n                }\n            }\n            \n            this.resetBoundingBox();\n            this.removeGlobalListeners();\n        }\n\n        addGlobalListeners() {\n            document.addEventListener('keydown', this.onTooltipKeydownBound)\n            window.addEventListener('mousedown', this.onBackgroundMousedownBound, true)\n        }\n        \n        removeGlobalListeners() {\n            document.removeEventListener('keydown', this.onTooltipKeydownBound)\n            window.removeEventListener('mousedown', this.onBackgroundMousedownBound, true)\n        }\n\n        onFocusin() {\n            this.domNode.classList.add('focus');\n        }\n\n        onFocusout() {\n            this.domNode.classList.remove('focus');\n        }\n\n        onTooltipKeydown(event) {\n            const key = event.key;\n            let flag = false;\n\n            switch (key) {\n                case 'Escape':\n                case 'Esc':\n                    this.closeTooltip();\n                    flag = true;\n                    break;\n                default:\n                    break;\n            }\n\n            if (flag) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n\n        onBackgroundMousedown(event){\n            if (!this.domNode.contains(event.target)) {\n                if (this.isOpen()) {\n                    this.closeTooltip();\n                }\n            }\n        }\n\n        getTooltipPosition() {\n            let setting = 'bottom';\n        \n            if (this.domNode.getAttribute(this.options.positionAttributeName)) {\n              setting = this.domNode.getAttribute(this.options.positionAttributeName);\n            }\n        \n            return setting;\n        }\n\n        // Calculate if the tooltip is within the viewport\n        checkBoundingBox() {\n            let bounds = this.tooltipNode.getBoundingClientRect();\n\n            this.checkHorizontalBounding(bounds);\n            this.checkVerticalBounding(bounds);\n        }\n\n        checkHorizontalBounding(bounds) {\n            let windowWidth = window.innerWidth\n    \n            if (bounds.right > windowWidth && bounds.left < 0) {\n                console.warn('Tooltip width too wide for the window');\n                return;\n            }\n        \n            // Check if the right side of the tooltip is beyond the right side of the viewport\n            if (bounds.right > windowWidth) {\n              this.moveTooltipLeft(bounds, windowWidth)\n            }\n        \n            // Check if the left side of the tooltip is beyond the left side of the viewport\n            if (bounds.left < 0 ) {\n              this.moveTooltipRight(bounds)\n            }\n        }\n\n        checkVerticalBounding(bounds) {\n            let windowHeight = window.innerHeight\n        \n            if (bounds.bottom > windowHeight && bounds.top < 0) {\n                console.warn('Tooltip height too high for the window');\n                return;\n            }\n        \n            // Check if the bottom of the tooltip is below the bottom of the viewport\n            if (bounds.bottom > windowHeight) {\n                this.moveTooltipUp();\n                return;\n            }\n        \n            // Check if the top of the tooltip is above the top of the viewport\n            if (bounds.top < 0) {\n                this.moveTooltipDown();\n                return;\n            }\n        }\n\n        moveTooltipUp() {\n            this.domNode.setAttribute(this.options.positionAttributeName, 'top');\n        }\n\n        moveTooltipRight(bounds) {\n            let numToMove = Math.floor(bounds.width / 2)\n            this.tooltipNode.style.left = `${numToMove}px`\n        }\n\n        moveTooltipDown() {\n            this.domNode.setAttribute(this.options.positionAttributeName, 'bottom');\n        }\n\n        moveTooltipLeft(bounds, windowWidth) {\n            let translateAmount = (windowWidth - Math.round(bounds.right) - (Math.round(bounds.width) / 1.6))\n            this.tooltipNode.style.transform = `translateX(${translateAmount}px)`\n        }\n\n        resetBoundingBox() {\n            if (this.tooltipNode.style.left || this.tooltipNode.style.transform) {\n                this.tooltipNode.style.left = null\n                this.tooltipNode.style.transform = null\n            }\n            this.domNode.setAttribute(this.options.positionAttributeName, this.tooltipPosition);\n        }\n    }\n\n\n\n\nexport default f11y\n\nif (typeof window !== 'undefined') {\n    window.f11y = f11y\n}"],
  "mappings": "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",
  "names": ["f11y", "domNode", "opts", "DEFAULTS", "items", "i", "itemNode", "itemPanelNode", "itemTriggerNode", "itemArr", "accordionItemObj", "event", "openState", "node", "nodes", "dropdownItem", "newDropdownItem", "item", "currentDropdownItem", "index", "char", "start", "dropdownNode", "triggerNode", "openClass", "handler", "key", "flag", "tgt", "isPrintableCharacter", "str", "menuItemTextContent", "dropdownBounds", "windowHeight", "newElement", "element", "currentElement", "layerNode", "documentBody", "targetLayer", "tab", "tabpanel", "targetTab", "tooltipNode", "timer", "setting", "bounds", "windowWidth", "numToMove", "translateAmount", "app_default"]
}
